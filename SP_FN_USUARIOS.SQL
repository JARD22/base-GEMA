--PROCEDIMIENTOS ALMACENADOS Y FUNCIONES MODULO DE PERSONAS.
SELECT * FROM PERSONA

ALTER TABLE PERSONA ALTER COLUMN UID TYPE VARCHAR(50)

ALTER TABLE TELEFONO ADD COLUMN EMERGENCIA BOOLEAN
ALTER TABLE ALUMNOS ADD COLUMN MOTIVO_RETIRO VARCHAR(200) 
ALTER TABLE ALUMNOS ADD COLUMN ESTADO BOOLEAN 

SELECT*FROM TIPO_PERSONA

INSERT INTO TIPO_PERSONA(NOMBRE,USR_REGISTRO,FEC_REGISTRO)
	     VALUES('USUARIO','ADMIN',CURRENT_DATE)
		 VALUES('ALUMNO','ADMIN',CURRENT_DATE)
	     VALUES('ENCARGADO','ADMIN',CURRENT_DATE)
	     VALUES('MADRE','ADMIN',CURRENT_DATE)
	     VALUES('PADRE','ADMIN',CURRENT_DATE)

INSERT INTO TIPO_TELEFONO(NOMBRE,DESCRIPCION,USR_REGISTRO,FEC_REGISTRO)
			VALUES ('CELULAR','TELEFONO CELULAR','ADMIN',CURRENT_DATE)
			VALUES ('CASA','TELEFONO CASA','ADMIN',CURRENT_DATE)

INSERT INTO PERSONA(COD_TIPO_PERSONA,DNI,PRIMER_NOMBRE,SEGUNDO_NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO,
					SEXO,FEC_NACIMIENTO,USR_REGISTRO,FEC_REGISTRO)
			VALUES(5,'0000000000000','JORGE','RAUL','AGUILERA','DURON','M','01-01-01','ADMIN',CURRENT_DATE)


-- LISTA DE PERSONAS

-- FIN LISTA DE PERSONAS


--LISTA TODAS LAS PERSONAS
SELECT * FROM FN_LISTA_PERSONAS(0)
CREATE OR REPLACE FUNCTION FN_LISTA_PERSONAS(IN_OFFSET INT ) 
RETURNS TABLE (OUT_NOMBRE TEXT,OUT_TIPO_PERSONA VARCHAR,OUT_COD_TIPO_PERSONA INT,OUT_UID VARCHAR, TOTAL BIGINT)
AS
$$
BEGIN
RETURN QUERY
SELECT CONCAT(PERSONA.PRIMER_NOMBRE,' ',PERSONA.PRIMER_APELLIDO)AS NOMBRE, TIPO_PERSONA.NOMBRE AS TIPO,
TIPO_PERSONA.COD_TIPO_PERSONA,PERSONA.UID, (SELECT COUNT(COD_PERSONA)AS TOTAL FROM PERSONA) FROM PERSONA
INNER JOIN TIPO_PERSONA ON PERSONA.COD_TIPO_PERSONA = TIPO_PERSONA.COD_TIPO_PERSONA
OFFSET IN_OFFSET
LIMIT 10;
END;
$$
LANGUAGE PLPGSQL;
--FIN LISTA TODAS LAS PERSONAS

--LISTA TIPO PERSONAS
SELECT * FROM FN_LISTA_TIPO_PERSONA()
CREATE OR REPLACE FUNCTION FN_LISTA_TIPO_PERSONA()RETURNS TABLE(OUT_ID INT, OUT_NOMBRE VARCHAR)
AS
$$
BEGIN
RETURN QUERY
SELECT COD_TIPO_PERSONA, NOMBRE FROM TIPO_PERSONA
ORDER BY COD_TIPO_PERSONA;
END;
$$
LANGUAGE PLPGSQL;
--FIN LISTA TIPO PERSONAS
SELECT*FROM PERSONA
SELECT * FROM TELEFONO
SELECT * FROM TELEFONO_PERSONA
--REGISTRAR PERSONA USUARIO

CALL SP_PERSONA_USUARIO(5,'0000000000001','ADMIN','ADMIN','HONDUREÑA','M','2001-01-01',
					   	'ADMIN','jorgeaguilera.agz@gmail.com','DIRECCION ADMIN',
						'[{"telefono":"9999999","cod_tipo_telefono":"1"},{"telefono":"9999992","cod_tipo_telefono":"2"}]',
					   	'ADMIN','ADMIN')


CREATE OR REPLACE PROCEDURE SP_PERSONA_USUARIO(
					IN_COD_TIPO_PERSONA INT,IN_DNI VARCHAR,IN_PRIMER_NOMBRE VARCHAR,IN_PRIMER_APELLIDO VARCHAR,
					IN_NACIONALIDAD VARCHAR,IN_SEXO CHAR,IN_FEC_NACIMIENTO DATE,
					IN_USR_REGISTRO VARCHAR,IN_CORREO VARCHAR,IN_DIRECCION VARCHAR,IN_TELEFONOS JSON,IN_UID VARCHAR,
					IN_SEGUNDO_NOMBRE VARCHAR DEFAULT '',IN_SEGUNDO_APELLIDO VARCHAR DEFAULT '' )


AS
$$
DECLARE CODIGO_PERSONA INT;
		CODIGO_DIRECCION INT;
		CODIGO_TELEFONO INT;
		CODIGO_CORREO INT;
		i JSON;
	

BEGIN
--PERSONA

IF EXISTS(SELECT PERSONA.DNI FROM PERSONA WHERE PERSONA.DNI=IN_DNI) THEN
RAISE EXCEPTION USING HINT ='DNI ya está registrado';
RETURN;
END IF;

INSERT INTO PERSONA(COD_TIPO_PERSONA,DNI,PRIMER_NOMBRE,SEGUNDO_NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO,
					NACIONALIDAD,SEXO,FEC_NACIMIENTO,USR_REGISTRO,FEC_REGISTRO,UID)
VALUES(IN_COD_TIPO_PERSONA,IN_DNI,IN_PRIMER_NOMBRE,IN_SEGUNDO_NOMBRE,IN_PRIMER_APELLIDO,IN_SEGUNDO_APELLIDO,
	   IN_NACIONALIDAD,IN_SEXO,IN_FEC_NACIMIENTO,IN_USR_REGISTRO,CURRENT_DATE,IN_UID);				
					
CODIGO_PERSONA:= (SELECT MAX(COD_PERSONA) FROM PERSONA);

--CORREO
IF EXISTS(SELECT CORREO.CORREO FROM CORREO WHERE CORREO.CORREO = IN_CORREO)THEN
RAISE EXCEPTION USING HINT = 'Correo ya está registrado';
RETURN;
END IF;

INSERT INTO CORREO(CORREO,USR_REGISTRO,FEC_REGISTRO)
VALUES(IN_CORREO,IN_USR_REGISTRO,CURRENT_DATE);

CODIGO_CORREO:= (SELECT MAX(COD_CORREO) FROM CORREO);

--CORREO-PERSONA
INSERT INTO CORREO_PERSONA(COD_PERSONA,COD_CORREO)
VALUES(CODIGO_PERSONA,CODIGO_CORREO);

--DIRECCION

INSERT INTO DIRECCION(DIRECCION,USR_REGISTRO,FEC_REGISTRO)
VALUES(IN_DIRECCION,IN_USR_REGISTRO,CURRENT_DATE);

CODIGO_DIRECCION:=(SELECT MAX(COD_DIRECCION) FROM DIRECCION);

--DIRECCION-PERSONA
INSERT INTO DIRECCION_PERSONA(COD_PERSONA,COD_DIRECCION)
VALUES (CODIGO_PERSONA,CODIGO_DIRECCION);

--NUMEROS DE TELEFONO
   FOR i IN SELECT * FROM json_array_elements(IN_TELEFONOS)
   LOOP
    INSERT INTO TELEFONO(TELEFONO,COD_TIPO_TELEFONO,WHATSAPP,EMERGENCIA,USR_REGISTRO,FEC_REGISTRO)
	VALUES(i->>'telefono',CAST(i->>'cod_tipo_telefono' AS INT),'false','false',IN_USR_REGISTRO,CURRENT_DATE);
	
	CODIGO_TELEFONO:=(SELECT MAX(COD_TELEFONO) FROM TELEFONO);
	
	--TELEFONO-PERSONA
	INSERT INTO TELEFONO_PERSONA(COD_TELEFONO,COD_PERSONA)
	VALUES(CODIGO_TELEFONO,CODIGO_PERSONA);
   END LOOP;

END;
$$
LANGUAGE PLPGSQL;

 --FIN PERSONA USUARIO
 
 SELECT * FROM PERSONA
 CALL SP_PERSONA_FAMILIAR(2,'0000000000010','PADRE4','APELLIDO PADRE4','HONDUREÑA','M','2001-01-01',
					   	'ADMIN','DIRECCION PADRE4',
						'[{"telefono":"9999977","cod_tipo_telefono":"1","whatsapp":"true","emergencia":"true"},
						 {"telefono":"9999978","cod_tipo_telefono":"2","whatsapp":"true","emergencia":"true"}]',
						 'LUGAR TRABAJO 2', 'OCUPACION PADRE4','false','UNIVERSIDAD COMPLETA','4123cebe-cd27-4fb6-9bd0-67bbbf2f7089',
					   	 'true','','','');
 
 SELECT * FROM TIPO_PERSONA
 SELECT * FROM PERSONA
 SELECT * FROM TELEFONO
 --PERSONA FAMILIAR/ENCARGADO
 CREATE OR REPLACE PROCEDURE SP_PERSONA_FAMILIAR(
					IN_COD_TIPO_PERSONA INT,IN_DNI VARCHAR,IN_PRIMER_NOMBRE VARCHAR,IN_PRIMER_APELLIDO VARCHAR,
					IN_NACIONALIDAD VARCHAR,IN_SEXO CHAR,IN_FEC_NACIMIENTO DATE,
					IN_USR_REGISTRO VARCHAR,IN_DIRECCION VARCHAR,IN_TELEFONOS JSON,IN_LUGAR_TRABAJO VARCHAR,
	 				IN_OCUPACION VARCHAR, IN_ENCARGADO BOOLEAN,IN_ESCOLARIDAD VARCHAR,IN_UID VARCHAR,
	 				IN_CREAR_GRUPO BOOLEAN, IN_GRUPO VARCHAR DEFAULT '',IN_SEGUNDO_NOMBRE VARCHAR DEFAULT '',
	 				IN_SEGUNDO_APELLIDO VARCHAR DEFAULT '' )

AS
$$
DECLARE CODIGO_PERSONA INT;
		CODIGO_DIRECCION INT;
		CODIGO_TELEFONO INT;	
		i JSON;
	

BEGIN
--PERSONA

IF EXISTS(SELECT PERSONA.DNI FROM PERSONA WHERE PERSONA.DNI=IN_DNI) THEN
RAISE EXCEPTION USING HINT ='Esta persona ya se encuentra registrada';
RETURN;
END IF;

INSERT INTO PERSONA(COD_TIPO_PERSONA,DNI,PRIMER_NOMBRE,SEGUNDO_NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO,
					NACIONALIDAD,SEXO,FEC_NACIMIENTO,UID,USR_REGISTRO,FEC_REGISTRO)
VALUES(IN_COD_TIPO_PERSONA,IN_DNI,IN_PRIMER_NOMBRE,IN_SEGUNDO_NOMBRE,IN_PRIMER_APELLIDO,IN_SEGUNDO_APELLIDO,
	   IN_NACIONALIDAD,IN_SEXO,IN_FEC_NACIMIENTO,IN_UID,IN_USR_REGISTRO,CURRENT_DATE);				
					
CODIGO_PERSONA:= (SELECT MAX(COD_PERSONA) FROM PERSONA);


--DIRECCION

INSERT INTO DIRECCION(DIRECCION,USR_REGISTRO,FEC_REGISTRO)
VALUES(IN_DIRECCION,IN_USR_REGISTRO,CURRENT_DATE);

CODIGO_DIRECCION:=(SELECT MAX(COD_DIRECCION) FROM DIRECCION);

--DIRECCION-PERSONA
INSERT INTO DIRECCION_PERSONA(COD_PERSONA,COD_DIRECCION)
VALUES (CODIGO_PERSONA,CODIGO_DIRECCION);

--NUMEROS DE TELEFONO
   FOR i IN SELECT * FROM json_array_elements(IN_TELEFONOS)
   LOOP
    INSERT INTO TELEFONO(TELEFONO,COD_TIPO_TELEFONO,WHATSAPP,EMERGENCIA,USR_REGISTRO,FEC_REGISTRO)
	VALUES(i->>'telefono',CAST(i->>'cod_tipo_telefono' AS INT),
		   				  CAST(i->>'whatsapp'AS BOOLEAN),CAST(i->>'emergencia' AS BOOLEAN),
		   				  IN_USR_REGISTRO,CURRENT_DATE);
	
	CODIGO_TELEFONO:=(SELECT MAX(COD_TELEFONO) FROM TELEFONO);
	
	--TELEFONO-PERSONA
	INSERT INTO TELEFONO_PERSONA(COD_TELEFONO,COD_PERSONA)
	VALUES(CODIGO_TELEFONO,CODIGO_PERSONA);
   END LOOP;

IF IN_CREAR_GRUPO=TRUE THEN
	INSERT INTO GRUPO_FAMILIAR(NOMBRE,USR_REGISTRO,FEC_REGISTRO)
	VALUES (IN_DNI,IN_USR_REGISTRO,CURRENT_DATE);

--AGREGAR EL GRUPO FAMILIAR CREADO
	INSERT INTO FAMILIARES(COD_PERSONA,COD_GRUPO,LUGAR_TRABAJO,ENCARGADO,OCUPACION,ESCOLARIDAD)
	VALUES(CODIGO_PERSONA,(SELECT GRUPO_FAMILIAR.COD_GRUPO FROM GRUPO_FAMILIAR WHERE NOMBRE = IN_DNI),
	IN_LUGAR_TRABAJO,IN_ENCARGADO, IN_OCUPACION,IN_ESCOLARIDAD);
	
ELSEIF CHARACTER_LENGTH(IN_GRUPO)>=13  AND EXISTS (SELECT GRUPO_FAMILIAR.NOMBRE FROM GRUPO_FAMILIAR WHERE NOMBRE=IN_GRUPO) THEN
	INSERT INTO FAMILIARES(COD_PERSONA,COD_GRUPO,LUGAR_TRABAJO,ENCARGADO,OCUPACION,ESCOLARIDAD)
	VALUES(CODIGO_PERSONA,(SELECT GRUPO_FAMILIAR.COD_GRUPO FROM GRUPO_FAMILIAR WHERE NOMBRE = IN_GRUPO),
	IN_LUGAR_TRABAJO,IN_ENCARGADO, IN_OCUPACION,IN_ESCOLARIDAD);
	
ELSE
	ROLLBACK;
	RAISE EXCEPTION USING HINT = 'No existe el grupo familiar ingresado';	
END IF;
	COMMIT;
END;
$$
LANGUAGE PLPGSQL;
 --FIN PERSONA FAMILIAR/ENARGADO
 
 SELECT * FROM GRUPO_FAMILIAR
 
 SELECT * FROM TIPO_PERSONA
 SELECT * FROM ALUMNOS
 SELECT* FROM ALUMNOS
CALL SP_PERSONA_ALUMNO(4,'0000000000004','ALUMNO1','APELLIDO ALUMNO1','HONDUREÑA','F','2001-01-01',
					   	'ADMIN','DIRECCION ALUMNO1','Observaciones Alumno','E','65e48d1b-a491-4346-8c6e-16dca801b6cd',
					   	'ALUMNO1','APELLIDO ALUMNO1');
 --PERSONA ALUMNO
 
 CALL SP_PERSONA_ALUMNO(4,'0000000000009','ALUMNO4','APELLIDO ALUMNO4','HONDUREÑA','F','2001-01-01',
					   	'ADMIN','DIRECCION ALUMNO4','Observaciones Alumno','M','1d737e5a-f54d-44fa-843e-a28c52786dc1',
					   	'0000000000007','ALUMNO4','APELLIDO ALUMNO4');
						
CREATE OR REPLACE PROCEDURE SP_PERSONA_ALUMNO(
					IN_COD_TIPO_PERSONA INT,IN_DNI VARCHAR,IN_PRIMER_NOMBRE VARCHAR,IN_PRIMER_APELLIDO VARCHAR,
					IN_NACIONALIDAD VARCHAR,IN_SEXO CHAR,IN_FEC_NACIMIENTO DATE,
					IN_USR_REGISTRO VARCHAR,IN_DIRECCION VARCHAR,IN_ENFERMEDAD VARCHAR,IN_VIVE CHAR,IN_UID VARCHAR,
	        		IN_GRUPO VARCHAR,IN_SEGUNDO_NOMBRE VARCHAR DEFAULT '',IN_SEGUNDO_APELLIDO VARCHAR DEFAULT '' )

AS
$$
DECLARE CODIGO_PERSONA INT;
		CODIGO_DIRECCION INT;
		CODIGO_ALUMNO INT;
BEGIN
--PERSONA

IF EXISTS(SELECT PERSONA.DNI FROM PERSONA WHERE PERSONA.DNI=IN_DNI) THEN
RAISE EXCEPTION USING HINT ='Esta persona ya se encuentra registrada';
RETURN;
END IF;

INSERT INTO PERSONA(COD_TIPO_PERSONA,DNI,PRIMER_NOMBRE,SEGUNDO_NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO,
					NACIONALIDAD,SEXO,FEC_NACIMIENTO,UID,USR_REGISTRO,FEC_REGISTRO)
VALUES(IN_COD_TIPO_PERSONA,IN_DNI,IN_PRIMER_NOMBRE,IN_SEGUNDO_NOMBRE,IN_PRIMER_APELLIDO,IN_SEGUNDO_APELLIDO,
	   IN_NACIONALIDAD,IN_SEXO,IN_FEC_NACIMIENTO,IN_UID,IN_USR_REGISTRO,CURRENT_DATE);				
					
CODIGO_PERSONA:= (SELECT MAX(COD_PERSONA) FROM PERSONA);


--DIRECCION

INSERT INTO DIRECCION(DIRECCION,USR_REGISTRO,FEC_REGISTRO)
VALUES(IN_DIRECCION,IN_USR_REGISTRO,CURRENT_DATE);

CODIGO_DIRECCION:=(SELECT MAX(COD_DIRECCION) FROM DIRECCION);

--DIRECCION-PERSONA
INSERT INTO DIRECCION_PERSONA(COD_PERSONA,COD_DIRECCION)
VALUES (CODIGO_PERSONA,CODIGO_DIRECCION);
   
 --ALUMNO
 INSERT INTO ALUMNOS(COD_PERSONA,ENFERMEDAD,VIVE_CON)
 VALUES(CODIGO_PERSONA,IN_ENFERMEDAD,IN_VIVE);
 
 CODIGO_ALUMNO:= (SELECT MAX(COD_ALUMNO) FROM ALUMNOS);
 
IF NOT EXISTS(SELECT GRUPO_FAMILIAR.NOMBRE FROM GRUPO_FAMILIAR WHERE NOMBRE = IN_GRUPO)THEN
ROLLBACK;
RAISE EXCEPTION USING HINT ='No existe el grupo familiar ingresado';
ELSE 
UPDATE ALUMNOS SET COD_GRUPO=(SELECT GRUPO_FAMILIAR.COD_GRUPO FROM GRUPO_FAMILIAR WHERE NOMBRE =IN_GRUPO)
WHERE COD_ALUMNO =CODIGO_ALUMNO;
END IF;
COMMIT;
END;
$$
LANGUAGE PLPGSQL;
 --FIN PERSONA ALUMNO


--PERSONA POR UID
SELECT * FROM FN_PERSONA_UID('45519ad3-a853-4ec0-8470-f0fd319fa203')
CREATE OR REPLACE FUNCTION FN_PERSONA_UID(IN_UID VARCHAR)RETURNS TABLE(
OUT_PRIMER_NOMBRE VARCHAR, OUT_SEGUNDO_NOMBRE VARCHAR,OUT_PRIMER_APELLIDO VARCHAR,OUT_SEGUNDO_APELLIDO VARCHAR,
	OUT_DNI VARCHAR,OUT_FEC_NACIMIENTO DATE, OUT_NACIONALIDAD VARCHAR,OUT_DIRECCION VARCHAR,OUT_ENCARGADO BOOLEAN,OUT_TELEFONOS JSON
)
AS
$$
BEGIN
RETURN QUERY
SELECT PERSONA.PRIMER_NOMBRE,PERSONA.SEGUNDO_NOMBRE,PERSONA.PRIMER_APELLIDO,PERSONA.SEGUNDO_APELLIDO,
	   PERSONA.DNI,PERSONA.FEC_NACIMIENTO,PERSONA.NACIONALIDAD,DIRECCION.DIRECCION,FAMILIARES.ENCARGADO,
			 JSON_AGG(JSON_BUILD_OBJECT(
				    'telefono',TELEFONO.TELEFONO,
		   			'cod_tipo_telefono',TELEFONO.COD_TIPO_TELEFONO,
		   			'whatsapp',TELEFONO.WHATSAPP,
		   		    'emergencia',TELEFONO.EMERGENCIA))  
	   FROM PERSONA
	   INNER JOIN DIRECCION_PERSONA ON PERSONA.COD_PERSONA = DIRECCION_PERSONA.COD_PERSONA
	   INNER JOIN DIRECCION ON DIRECCION_PERSONA.COD_DIRECCION = DIRECCION.COD_DIRECCION
	   INNER JOIN TELEFONO_PERSONA ON PERSONA.COD_PERSONA = TELEFONO_PERSONA.COD_PERSONA
	   INNER JOIN TELEFONO ON TELEFONO_PERSONA.COD_TELEFONO = TELEFONO.COD_TELEFONO
	   INNER JOIN FAMILIARES ON PERSONA.COD_PERSONA = FAMILIARES.COD_PERSONA
	   WHERE PERSONA.UID =IN_UID
	   GROUP BY PERSONA.PRIMER_NOMBRE,PERSONA.SEGUNDO_NOMBRE,PERSONA.PRIMER_APELLIDO,PERSONA.SEGUNDO_APELLIDO,
	     PERSONA.DNI,PERSONA.FEC_NACIMIENTO,PERSONA.NACIONALIDAD,DIRECCION.DIRECCION,FAMILIARES.ENCARGADO;

END;
$$
LANGUAGE PLPGSQL;
UPDATE PERSONA SET UID = '7f7d58c6-9796-4e12-a7f2-4142ff45da79' WHERE COD_PERSONA=33
SELECT * FROM PERSONA
SELECT * FROM FAMILIARES
SELECT * FROM GRUPO_FAMILIAR
SELECT * FROM ALUMNOS
SELECT * FROM PARAMETROS
SELECT * FROM TELEFONO
SELECT * FROM TIPO_PERSONA

INSERT INTO PARAMETROS(PARAMETRO,VALOR,USR_REGISTRO,FEC_REGISTRO)
VALUES('ADMIN_INTENTOS','3','ADMIN',CURRENT_DATE)


UPDATE ALUMNOS SET ESTADO = TRUE






