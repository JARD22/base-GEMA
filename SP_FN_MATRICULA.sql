	SELECT * FROM TIPO_MATRICULA
	SELECT * FROM MATRICULA
	SELECT * FROM EXPEDIENTE
	SELECT * FROM SECCIONES
	SELECT * FROM CURSOS
	
	
	
	ALTER TABLE MATRICULA ADD COLUMN DOC_PENDIENTE BOOLEAN NOT NULL 
	ALTER TABLE MATRICULA ADD COLUMN DOC_DESCRIPCION VARCHAR  
	ALTER TABLE MATRICULA ADD COLUMN RETRASADA BOOLEAN DEFAULT FALSE
	ALTER TABLE MATRICULA ADD COLUMN COD_CURSO_RETRASADA INT
	ALTER TABLE MATRICULA ADD CONSTRAINT FK_MATRICULA_CURSO_RETRASADA FOREIGN KEY(COD_CURSO_RETRASADA)
	REFERENCES CURSOS(COD_CURSO)
	ALTER TABLE MATRICULA ADD COLUMN CLASE_RETRASADA VARCHAR(50)
	ALTER TABLE MATRICULA ADD COLUMN CONDICIONADO BOOLEAN DEFAULT FALSE
	ALTER TABLE MATRICULA ADD COLUMN CONDICIONADO_MOTIVO VARCHAR(200)
	ALTER TABLE MATRICULA ALTER COLUMN ANIO TYPE VARCHAR
	INSERT INTO TIPO_MATRICULA(NOMBRE,USR_REGISTRO,FEC_REGISTRO)
				VALUES('COLEGIO','jorgeaguilera.agz@gmail.com',current_date)
				
				
SELECT * FROM FN_TIPOS_MATRICULA()				
CREATE OR REPLACE FUNCTION FN_TIPOS_MATRICULA() RETURNS TABLE(OUT_COD_TIPO INT,OUT_NOMBRE VARCHAR)
AS
$$
BEGIN
RETURN QUERY
SELECT COD_TIPO_MATRICULA, NOMBRE FROM TIPO_MATRICULA;
END;
$$
LANGUAGE PLPGSQL;


SELECT * FROM FN_CURSOS()
CREATE OR REPLACE FUNCTION FN_CURSOS() RETURNS TABLE(OUT_COD_CURSO INT,OUT_NOMBRE VARCHAR,OUT_ESTADO BOOLEAN)
AS
$$
BEGIN
RETURN QUERY
SELECT COD_CURSO,NOMBRE,ESTADO FROM CURSOS
WHERE ESTADO= TRUE
ORDER BY NOMBRE ASC;
END;
$$
LANGUAGE PLPGSQL;



SELECT * FROM FN_DATOS_ALUMNO('0000000000020')
CREATE OR REPLACE FUNCTION FN_DATOS_ALUMNO(IN_DNI VARCHAR)RETURNS TABLE(OUT_NOMBRE TEXT,OUT_FEC_NACIMIENTO DATE,
																		OUT_NACIONALIDAD VARCHAR,OUT_SEXO CHAR,	
																		OUT_DIRECCION VARCHAR,OUT_COD_ALUMNO INT,
																	   	OUT_COD_GRUPO INT)
AS

$$

BEGIN

IF (SELECT PERSONA.COD_TIPO_PERSONA FROM PERSONA WHERE DNI=IN_DNI)<>4 THEN
RAISE EXCEPTION USING HINT = 'DNI ingresado no corresponde a un alumno';
END IF;
IF NOT EXISTS(SELECT PERSONA.DNI FROM PERSONA WHERE DNI=IN_DNI) THEN
RAISE EXCEPTION USING HINT = 'DNI no registrado';
END IF;


RETURN QUERY
SELECT CONCAT(PERSONA.PRIMER_NOMBRE,' ',PERSONA.SEGUNDO_NOMBRE,' ',PERSONA.PRIMER_APELLIDO, ' ',PERSONA.SEGUNDO_APELLIDO),FEC_NACIMIENTO,
NACIONALIDAD,SEXO,DIRECCION.DIRECCION,ALUMNOS.COD_ALUMNO,ALUMNOS.COD_GRUPO
 FROM PERSONA
INNER JOIN DIRECCION_PERSONA ON PERSONA.COD_PERSONA =DIRECCION_PERSONA.COD_PERSONA
INNER JOIN DIRECCION ON DIRECCION_PERSONA.COD_DIRECCION= DIRECCION.COD_DIRECCION
INNER JOIN ALUMNOS ON PERSONA.COD_PERSONA = ALUMNOS.COD_PERSONA
WHERE PERSONA.DNI =IN_DNI;
END;
$$
LANGUAGE PLPGSQL;


SELECT JSON_BUILD_OBJECT('nombre',CONCAT(PERSONA.PRIMER_NOMBRE,' ',PERSONA.SEGUNDO_NOMBRE,' ',PERSONA.PRIMER_APELLIDO, ' ',PERSONA.SEGUNDO_APELLIDO),
						  'parentesco',TIPO_PERSONA.NOMBRE,
						 'lugar_trabajo',FAMILIARES.LUGAR_TRABAJO,
						  'telefonos',JSON_AGG(JSON_BUILD_OBJECT('telefono',TELEFONO.TELEFONO)))
FROM PERSONA
INNER JOIN FAMILIARES ON PERSONA.COD_PERSONA= FAMILIARES.COD_PERSONA
INNER JOIN TIPO_PERSONA ON PERSONA.COD_TIPO_PERSONA = TIPO_PERSONA.COD_TIPO_PERSONA
INNER JOIN TELEFONO_PERSONA ON PERSONA.COD_PERSONA= TELEFONO_PERSONA.COD_PERSONA
INNER JOIN TELEFONO ON TELEFONO_PERSONA.COD_TELEFONO = TELEFONO.COD_TELEFONO
INNER JOIN GRUPO_FAMILIAR ON FAMILIARES.COD_GRUPO= GRUPO_FAMILIAR.COD_GRUPO
								WHERE GRUPO_FAMILIAR.COD_GRUPO=10 
GROUP BY PERSONA.PRIMER_NOMBRE,PERSONA.SEGUNDO_NOMBRE,PERSONA.PRIMER_APELLIDO,PERSONA.SEGUNDO_APELLIDO,
										 TIPO_PERSONA.NOMBRE,FAMILIARES.LUGAR_TRABAJO
										 

SELECT * FROM  FN_PARENTESCO('0601200414001')
CREATE OR REPLACE FUNCTION FN_PARENTESCO(IN_DNI VARCHAR) RETURNS TABLE(OUT_NOMBRE TEXT,OUT_TIPO VARCHAR,
																	   OUT_LUGAR VARCHAR, OUT_TELEFONOS JSON,OUT_DNI VARCHAR)
AS
$$
DECLARE GRUPO INT;
BEGIN

GRUPO:= (SELECT COD_GRUPO FROM ALUMNOS
		 INNER JOIN  PERSONA ON ALUMNOS.COD_PERSONA = PERSONA.COD_PERSONA
		 WHERE PERSONA.DNI= IN_DNI);
RETURN QUERY
SELECT CONCAT(PERSONA.PRIMER_NOMBRE,' ',PERSONA.SEGUNDO_NOMBRE,' ',PERSONA.PRIMER_APELLIDO, ' ',PERSONA.SEGUNDO_APELLIDO)AS NOMBRE,
		TIPO_PERSONA.NOMBRE,FAMILIARES.LUGAR_TRABAJO,JSON_AGG(JSON_BUILD_OBJECT('telefono',TELEFONO.TELEFONO)),PERSONA.DNI
								FROM PERSONA
								INNER JOIN FAMILIARES ON PERSONA.COD_PERSONA= FAMILIARES.COD_PERSONA
								INNER JOIN TIPO_PERSONA ON PERSONA.COD_TIPO_PERSONA = TIPO_PERSONA.COD_TIPO_PERSONA
								INNER JOIN TELEFONO_PERSONA ON PERSONA.COD_PERSONA= TELEFONO_PERSONA.COD_PERSONA
								INNER JOIN TELEFONO ON TELEFONO_PERSONA.COD_TELEFONO = TELEFONO.COD_TELEFONO
								INNER JOIN GRUPO_FAMILIAR ON FAMILIARES.COD_GRUPO= GRUPO_FAMILIAR.COD_GRUPO
								WHERE GRUPO_FAMILIAR.COD_GRUPO=GRUPO
								GROUP BY PERSONA.PRIMER_NOMBRE,PERSONA.SEGUNDO_NOMBRE,PERSONA.PRIMER_APELLIDO,PERSONA.SEGUNDO_APELLIDO,
										 TIPO_PERSONA.NOMBRE,FAMILIARES.LUGAR_TRABAJO,PERSONA.DNI;
END;
$$
LANGUAGE PLPGSQL;

VALUES(3,10,3,19,10,'2021-11-05',false,'',false,'',false,'',9,'jorgeaguilera.agz@gmail.com',CURRENT_DATE)

CALL SP_NUEVA_MATRICULA(3,10,3,19,10,'2023','CENG ALFONSO GUILLEN ZELAYa','2020-11-05',
						'jorgeaguilera.agz@gmail.com',false,'',false,'',false,'',9);
	
DELETE FROM MATRICULA	
DELETE FROM EXPEDIENTE
	
	SELECT * FROM MATRICULA
	SELECT * FROM EXPEDIENTE
	
CREATE OR REPLACE PROCEDURE SP_NUEVA_MATRICULA(
							IN_COD_TIPO_MATRICULA INT,IN_COD_ALUMNO INT,IN_COD_CURSO INT,IN_COD_SECCION INT,
							IN_COD_GRUPO INT,IN_ANIO_MATRICULA VARCHAR, IN_NOM_COLEGIO VARCHAR,IN_FECHA_ESTUDIO DATE,
							IN_USR_REGISTRO VARCHAR,IN_DOC_PENDIENTE BOOLEAN DEFAULT FALSE,
							IN_DOC_DESCRIPCION VARCHAR DEFAULT '',IN_CONDICIONADO BOOLEAN DEFAULT FALSE,
							IN_CONDICIONADO_MOTIVO VARCHAR DEFAULT '',IN_RETRASADA BOOLEAN DEFAULT FALSE,
							IN_CLASE_RETRASADA VARCHAR DEFAULT '',IN_COD_CURSO_RETRASADA INT DEFAULT 9)
AS
$$

DECLARE CODIGO_COLEGIO INT;
BEGIN

IF NOT EXISTS(SELECT COD_COLEGIO FROM COLEGIO WHERE NOMBRE = UPPER(IN_NOM_COLEGIO))THEN
RAISE EXCEPTION USING HINT ='Colegio no registrado';
RETURN;
ELSE
CODIGO_COLEGIO:=(SELECT COD_COLEGIO FROM COLEGIO WHERE NOMBRE = UPPER(IN_NOM_COLEGIO));
END IF;

IF EXISTS(SELECT ANIO FROM MATRICULA WHERE COD_ALUMNO=IN_COD_ALUMNO AND ANIO=IN_ANIO_MATRICULA) THEN
RAISE EXCEPTION USING HINT='Este alumno ya se encuentra matriculado en ese a√±o';
RETURN;
END IF;
INSERT INTO MATRICULA (COD_TIPO_MATRICULA,COD_ALUMNO,COD_CURSO,COD_SECCION,COD_GRUPO,ANIO,DOC_PENDIENTE,
					   DOC_DESCRIPCION,CONDICIONADO,CONDICIONADO_MOTIVO,RETRASADA,CLASE_RETRASADA,
					   COD_CURSO_RETRASADA,USR_REGISTRO,FEC_REGISTRO)
					   
					   VALUES(IN_COD_TIPO_MATRICULA,IN_COD_ALUMNO,IN_COD_CURSO,IN_COD_SECCION,IN_COD_GRUPO,
							 IN_ANIO_MATRICULA,IN_DOC_PENDIENTE,IN_DOC_DESCRIPCION,IN_CONDICIONADO,IN_CONDICIONADO_MOTIVO,
							 IN_RETRASADA,IN_CLASE_RETRASADA,IN_COD_CURSO_RETRASADA,IN_USR_REGISTRO,CURRENT_DATE);

INSERT INTO EXPEDIENTE(COD_ALUMNO,COD_COLEGIO,COD_CURSO,ANIO,USR_REGISTRO,FEC_REGISTRO)
			VALUES (IN_COD_ALUMNO,CODIGO_COLEGIO,IN_COD_CURSO_RETRASADA,IN_FECHA_ESTUDIO,IN_USR_REGISTRO,CURRENT_DATE);
END;
$$
LANGUAGE PLPGSQL;

INSERT INTO MATRICULA (COD_TIPO_MATRICULA,
					   COD_ALUMNO,
					   COD_CURSO,
					   COD_SECCION,
					   COD_GRUPO,
					   ANIO,
					   DOC_PENDIENTE,
					   DOC_DESCRIPCION,
					   CONDICIONADO,
					   CONDICIONADO_MOTIVO,
					   RETRASADA,
					   CLASE_RETRASADA,
					   COD_CURSO_RETRASADA,
					   USR_REGISTRO,
					   FEC_REGISTRO)
					  VALUES(3,10,3,19,10,'2021-11-05',false,'',false,'',false,'',9,'jorgeaguilera.agz@gmail.com',CURRENT_DATE)


INSERT INTO EXPEDIENTE (COD_ALUMNO,COD_COLEGIO,COD_CURSO,ANIO,USR_REGISTRO,FEC_REGISTRO)
						VALUES(10,9,9,'2021-11-05','jorgeaguilera.agz@gmail.com',CURRENT_DATE)


SELECT * FROM FN_METRICAS_MATRICULA('2022')
CREATE OR REPLACE FUNCTION FN_METRICAS_MATRICULA(IN_ANIO VARCHAR)RETURNS TABLE(OUT_TOTAL BIGINT,
																			   OUT_NOMBRE VARCHAR,
																			   OUT_TOTAL_MATRICULA BIGINT)
AS
$$
BEGIN
RETURN QUERY
SELECT COUNT(COD_MATRICULA)AS TOTAL_TIPO, NOMBRE, 
(SELECT COUNT(COD_MATRICULA) FROM MATRICULA WHERE ANIO = IN_ANIO )AS TOTAL_MATRICULA FROM MATRICULA
INNER JOIN TIPO_MATRICULA ON MATRICULA.COD_TIPO_MATRICULA = TIPO_MATRICULA.COD_TIPO_MATRICULA
WHERE ANIO = IN_ANIO
GROUP BY TIPO_MATRICULA.NOMBRE
ORDER BY NOMBRE DESC;
END;
$$
LANGUAGE PLPGSQL;

SELECT * FROM FN_LISTA_DOC_PENDIENTE('2022',1,0)
CREATE OR REPLACE FUNCTION FN_LISTA_DOC_PENDIENTE(IN_ANIO VARCHAR, IN_TIPO INT, IN_OFFSET INT)RETURNS TABLE
(OUT_COD_MATRICULA INT,OUT_DOC_PENDIENTE BOOLEAN,OUT_DESCRIPCION VARCHAR,OUT_NOMBRE TEXT, OUT_CUSO VARCHAR,OUT_TOTAL BIGINT)
AS
$$
BEGIN
RETURN QUERY
SELECT COD_MATRICULA,DOC_PENDIENTE,DOC_DESCRIPCION,CONCAT(PERSONA.PRIMER_NOMBRE, ' ', PERSONA.PRIMER_APELLIDO) AS NOMBRE,
CURSOS.NOMBRE AS CURSO,COUNT(COD_MATRICULA) FROM MATRICULA 
INNER JOIN ALUMNOS ON MATRICULA.COD_ALUMNO = ALUMNOS.COD_ALUMNO
INNER JOIN PERSONA ON ALUMNOS.COD_PERSONA = PERSONA.COD_PERSONA
INNER JOIN CURSOS ON MATRICULA.COD_CURSO= CURSOS.COD_CURSO
WHERE  ANIO =IN_ANIO AND COD_TIPO_MATRICULA =IN_TIPO
GROUP BY COD_MATRICULA,DOC_PENDIENTE,DOC_DESCRIPCION,PERSONA.PRIMER_NOMBRE,PERSONA.PRIMER_APELLIDO,CURSOS.NOMBRE
LIMIT 10
OFFSET IN_OFFSET;
END;
$$
LANGUAGE PLPGSQL;


SELECT * FROM FN_DOC_PENDIENTE_DNI('2022',1,'0801201714002')

CREATE OR REPLACE FUNCTION FN_DOC_PENDIENTE_DNI(IN_ANIO VARCHAR, IN_TIPO INT, IN_DNI VARCHAR)RETURNS TABLE
(OUT_COD_MATRICULA INT,OUT_DOC_PENDIENTE BOOLEAN,OUT_DESCRIPCION VARCHAR,OUT_NOMBRE TEXT, OUT_CUSO VARCHAR)
AS
$$
BEGIN
RETURN QUERY
SELECT COD_MATRICULA,DOC_PENDIENTE,DOC_DESCRIPCION,CONCAT(PERSONA.PRIMER_NOMBRE, ' ', PERSONA.PRIMER_APELLIDO) AS NOMBRE,
CURSOS.NOMBRE AS CURSO FROM MATRICULA 
INNER JOIN ALUMNOS ON MATRICULA.COD_ALUMNO = ALUMNOS.COD_ALUMNO
INNER JOIN PERSONA ON ALUMNOS.COD_PERSONA = PERSONA.COD_PERSONA
INNER JOIN CURSOS ON MATRICULA.COD_CURSO= CURSOS.COD_CURSO
WHERE  ANIO = IN_ANIO AND PERSONA.DNI = IN_DNI
LIMIT 1;
END;
$$
LANGUAGE PLPGSQL;



CREATE OR REPLACE PROCEDURE SP_ACTUALIZAR_DOC(IN_DOC_PENDIENTE BOOLEAN,IN_COD_MATRICULA INT,IN_DESC_DOC VARCHAR DEFAULT '')
AS
$$
BEGIN
UPDATE MATRICULA SET DOC_PENDIENTE = IN_DOC_PENDIENTE,
					 DOC_DESCRIPCION =IN_DESC_DOC
					 WHERE COD_MATRICULA = IN_COD_MATRICULA;
END
$$
LANGUAGE PLPGSQL;



select * from cursos
SELECT * FROM TIPO_MATRICULA
SELECT * FROM EXPEDIENTE
SELECT * FROM COLEGIO
SELECT * FROM PERSONA
SELECT * FROM CURSOS
SELECT * FROM SECCIONES
SELECT * FROM TIPO_PERSONA
SELECT * FROM PERSONA
SELECT * FROM TELEFONO_PERSONA WHERE COD_PERSONA =34
SELECT * FROM MATRICULA
SELECT * FROM ALUMNOS
SELECT * FROM TELEFONO
SELECT * FROM FAMILIARES
SELECT * FROM GRUPO_FAMILIAR

